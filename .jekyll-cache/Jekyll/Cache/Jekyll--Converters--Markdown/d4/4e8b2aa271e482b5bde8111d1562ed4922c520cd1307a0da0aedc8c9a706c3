I"+<p><br /></p>

<p>在了解 <code class="language-plaintext highlighter-rouge">AJAX</code> 的過程，有些 Javascript 的概念需要了解才能依序破解 <code class="language-plaintext highlighter-rouge">AJAX</code> 這道牆。接下來這篇文章會介紹 <code class="language-plaintext highlighter-rouge">回呼函式</code> 和 <code class="language-plaintext highlighter-rouge">AJAX</code> 的關係以及以些 Javascript 的特性</p>

<h3 id="回呼函式之前">回呼函式之前</h3>

<p>想要了解回呼函式，就必須先了解 Javascript 的執行特性</p>

<p>相關文章：
<a href="https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html">[筆記] 理解 JavaScript 中的事件循環、堆疊、佇列和併發模式</a></p>

<ul>
  <li>單執行緒（single threaded）</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Javasciprt</code> 是單執行緒的語言，單執行緒的特性就是順序執行，當遇到比較耗時的任務時，還未執行的任務就會處於等待狀態，一定要等到前面的任務完成了，才會往後執行。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">work</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">done</span><span class="dl">'</span><span class="p">)</span>

<span class="c1">// work</span>
<span class="c1">// done</span>
</code></pre></div></div>

<ul>
  <li>堆疊（stack）</li>
</ul>

<p>如果你有搬東西的經驗，就能理解堆疊的概念。<code class="language-plaintext highlighter-rouge">Javascript</code> 會記錄程式碼順序，當遇到某個函式，便會把函式往上疊加；如果在函式中執行 <code class="language-plaintext highlighter-rouge">return</code> ，則會從上方開始依序搬離函式，堆疊這種結構原理稱為「後進先出」 <code class="language-plaintext highlighter-rouge">Last In First Out</code> （LIFO）。</p>

<ul>
  <li>阻塞（blocking）</li>
</ul>

<p>如果上一個函式執行時間很長，這時如果不使用非同步處理，函式還是以 <code class="language-plaintext highlighter-rouge">堆疊</code> 執行完才能繼續，進而導致 <code class="language-plaintext highlighter-rouge">阻塞</code> 情形產生，像是 <code class="language-plaintext highlighter-rouge">lag</code> 一樣。</p>

<p>這就是為什麼我們需要非同步的功能。而所謂的回呼函式，便是利用 Javascript 的非同步處理，讓這個要跑比較久的函式先去旁邊，等跑完再把它「回呼」回來。</p>

<p>怎麼回呼回來？這邊就要知道 Event Loop 的機制</p>

<h3 id="回呼函式蛤">回呼函式？蛤？</h3>

<blockquote>
  <p>回呼函式，簡單來說就是會被叫回來執行的函式</p>
</blockquote>

<p>例如：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">work</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">working</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">done</span><span class="p">(</span><span class="nx">goToWork</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">sleeping</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">goToWork</span><span class="p">()</span>
<span class="p">}</span>

<span class="nx">done</span><span class="p">(</span><span class="nx">work</span><span class="p">)</span>

<span class="c1">// sleeping</span>
<span class="c1">// working</span>
</code></pre></div></div>

<p>這裡的函式以參數型態，傳遞給另一個函式</p>

<ol>
  <li>執行 <code class="language-plaintext highlighter-rouge">done</code> 函式，並且將參數 <code class="language-plaintext highlighter-rouge">work</code> 帶入 <code class="language-plaintext highlighter-rouge">goToWork</code></li>
  <li>執行 <code class="language-plaintext highlighter-rouge">done</code> 函式的過程，先印出 <code class="language-plaintext highlighter-rouge">sleeping</code>，再執行 <code class="language-plaintext highlighter-rouge">work</code> 函式</li>
  <li>執行 <code class="language-plaintext highlighter-rouge">work</code> 函式</li>
</ol>

<p>待補充…</p>

<div style="display:none;">

```js
let money = 158

function pay(a) {
  return a * money
}

function workTime(n) {
  let salery = pay(n)
  console.log(salery)
}

workTime(8)
```

```js
function work() {
  console.log('working')
}

function done(goToWork) {
  console.log('sleeping')
  goToWork()
}

done(work)
```

瀏覽器執行環境所提供 HTML DOM API 中的 window 物件中，setInterval、setTimeout方法


當有多個 `AJAX` 需要執行時，在使用 `XMLHttpRequest` 物件時應創建一個用於執行該對象的函數，並為每個AJAX任務創建一個回調函數。

函數調用應包含URL以及響應就緒後要調用的函數。

Using a Callback Function
A callback function is a function passed as a parameter to another function.

If you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task.

The function call should contain the URL and what function to call when the response is ready.

```js
loadDoc("url-1", myFunction1);

loadDoc("url-2", myFunction2);

function loadDoc(url, cFunction) {
  var xhttp;
  xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 &amp;&amp; this.status == 200) {
      cFunction(this);
    }
  };
  xhttp.open("GET", url, true);
  xhttp.send();
}

function myFunction1(xhttp) {
  // action goes here
}
function myFunction2(xhttp) {
  // action goes here
}
```
</div>
:ET