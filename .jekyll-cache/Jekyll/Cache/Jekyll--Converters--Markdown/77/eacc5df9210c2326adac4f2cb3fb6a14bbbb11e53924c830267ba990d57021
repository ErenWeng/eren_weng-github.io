I"F.<p><br /></p>

<h2 id="ajax翻譯翻譯">AJAX？翻譯翻譯！</h2>

<p>AJAX 全名為 <code class="language-plaintext highlighter-rouge">Asynchronous JavaScript and XML</code>「非同步JS和XML」</p>

<h3 id="什麼是同步跟非同步">什麼是同步跟非同步</h3>

<blockquote>
  <p>同步</p>
</blockquote>

<ul>
  <li>
    <p>同步處理 ( Synchronous processing model )：
當瀏覽器讀到 <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> 標籤時，會停止載入資料，這時瀏覽器需要等待 JavaScript 程式執行，也要等伺服器將資料傳送完成，如果資料傳送時間長，使用者將會有很長一段時間無法操作頁面，且接下去的程式也要等資料傳送完成才能繼續執行。</p>
  </li>
  <li>
    <p>非同步處理 ( Asynchronous processing model )：
當瀏覽器在更新頁面資料時，使用者依舊可以操作頁面元素，例如：搜尋關鍵字時，會自動載入關鍵字清單供選擇。</p>
  </li>
</ul>

<p>現在知道非同步處理了，讓我們來看看所謂的AJAX</p>

<h3 id="ajax是什麼">AJAX是什麼？</h3>

<p>AJAX 是利用 <code class="language-plaintext highlighter-rouge">Javascript</code>、<code class="language-plaintext highlighter-rouge">XML</code>及 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code>物件 等技術來完成非同步處理的模型，如果你有聽過單頁網頁 SPA ( Single page web application ) 便是使用這些技術及這項模型，網頁只將需要更新的部分做重新渲染，讓你在做任何動作時都在同一頁就能完成。</p>

<p>然現今的AJAX技術大多是使用 <code class="language-plaintext highlighter-rouge">JSON</code> 檔去傳輸資料，鮮少會再使用 <code class="language-plaintext highlighter-rouge">XML</code></p>

<h3 id="ajax-的過程">AJAX 的過程</h3>

<ol>
  <li>觸發事件（例：按了某按鈕）</li>
  <li>使用 Javascript 來產生 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> 物件實體</li>
  <li>通過 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> 實體發送 HTTP 請求</li>
  <li>伺服器接收並處理請求</li>
  <li>伺服器將處理結果和 <code class="language-plaintext highlighter-rouge">Response</code> 回傳至瀏覽器</li>
  <li>使用 Javascript 接收回傳的處理結果</li>
</ol>

<p><img src="../images/pic_ajax.gif" alt="ajax" /></p>

<p><a href="https://www.w3schools.com/js/js_ajax_intro.asp">圖片來源 AJAX Introduction</a></p>

<hr />

<p>大致上知道AJAX的流程後，接下來就要來了解 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> 這個物件在做什麼</p>

<h3 id="xmlhttprequest-方法">XMLHttpRequest 方法</h3>

<ul>
  <li>產生實體化</li>
</ul>

<p>使用 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code>物件 發出 HTTP 請求，首先要先實體化物件</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
  <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span> <span class="p">()</span> <span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xhr</span><span class="p">);</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<ul>
  <li>客製化請求：open</li>
</ul>

<blockquote>
  <p>　open ( method, url, async )</p>
</blockquote>

<ol>
  <li>method: 發送請求的方法是 GET 還是 POST</li>
  <li>url: 發送的檔案網址/位置</li>
  <li>async: 非同步嗎？（true or false）</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>setRequestHeader：設定內容的類型</li>
</ul>

<blockquote>
  <p>setRequestHeader(header, value)</p>
</blockquote>

<ol>
  <li>header：HTTP的頭部欄位名稱</li>
</ol>

<p>祥見 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">HTTP header fields</a></p>

<ol>
  <li>value：網際網路媒體型式</li>
</ol>

<p>通常是使用Content-type 來請求的多媒體類型，祥見 <a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B">媒體類型</a></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">發送表單類型的資料：</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">application/x-www-form-urlencoded</span><span class="dl">'</span><span class="p">);</span>

<span class="err">發送</span> <span class="nx">JSON</span> <span class="err">類型的資料：</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>發送請求：send</li>
</ul>

<p>發送請求至伺服器</p>

<p>如果為 JSON 類型，可先將資料轉成文字再傳送：JSON.stringify(data)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div></div>

<hr />

<h3 id="xmlhttprequest-屬性">XMLHttpRequest 屬性</h3>

<p>可以打開 Chrome DevTools 查看console，嘗試生成 <code class="language-plaintext highlighter-rouge">XMLHttpRequest</code> 物件並且印出看看有什麼</p>

<p><img src="../images/Ajax_XHR.png" alt="ajax" /></p>

<ul>
  <li>readyState</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">readystate</code> 數字所代表的意義：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">數字</th>
      <th style="text-align: left">意思</th>
      <th style="text-align: left">意義</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">0</td>
      <td style="text-align: left">UNSENT</td>
      <td style="text-align: left">有XMLHttpRequest物件，但沒有請求</td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">OPENED</td>
      <td style="text-align: left">使用open方法建立請求，但沒有傳送資料</td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left">HEADERS_RECEIVED</td>
      <td style="text-align: left">使用send方法送出請求，已收到請求</td>
    </tr>
    <tr>
      <td style="text-align: left">3</td>
      <td style="text-align: left">LOADING</td>
      <td style="text-align: left">接受請求，資料正在處理中</td>
    </tr>
    <tr>
      <td style="text-align: left">4</td>
      <td style="text-align: left">DONE</td>
      <td style="text-align: left">資料處理完成，可以接收資料</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>onreadystatechange</li>
</ul>

<p>定義一個 <code class="language-plaintext highlighter-rouge">function</code> 當請求收到答案時要執行的功能</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">demo</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>responseText</li>
</ul>

<p>回傳的資料以文字/字串呈現</p>

<ul>
  <li>responseXML</li>
</ul>

<p>回傳的資料已 XML 呈現</p>

<ul>
  <li>status</li>
</ul>

<p>HTTP 狀態，祥見 <a href="https://www.w3schools.com/tags/ref_httpmessages.asp">HTTP Status Messages</a></p>

<ul>
  <li>statusText</li>
</ul>

<p>回傳 HTTP 狀態的訊息</p>

<hr />

<p>打一次AJAX</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="c1">// 宣告一個 xhr 物件</span>

<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">./sample.json</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="c1">// 使用get方法、API、非同步送出資料</span>

<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="c1">// 送出資料</span>

<span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
<span class="c1">// 成功則執行此函式</span>

<span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="c1">// 失敗則執行此函式</span>

</code></pre></div></div>

<hr />

<p>隨著Ajax的技術成熟，一些簡化Ajax使用方法的程式庫也相繼問世。AJAX的方法也演進到不只單純的要求與回應，甚至還要能進一步的做資料處理，然而XHR的非同步程式結構並沒有提供這種方法。</p>

<p>接下來將介紹其他函式庫，待續…</p>
:ET